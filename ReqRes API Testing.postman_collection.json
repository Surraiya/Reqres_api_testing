{
	"info": {
		"_postman_id": "109f3302-56c8-4a52-9f78-fdb897ec6826",
		"name": "ReqRes API Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27253252"
	},
	"item": [
		{
			"name": "/api/users",
			"item": [
				{
					"name": "Get All Users",
					"item": [
						{
							"name": "Get All Users- Success",
							"item": [
								{
									"name": "Get All Users with Default Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct: 1\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct: 6', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct: 2', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with empty Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users for all users on a Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Length of 'data' array is 12\", function () {\r",
													"    pm.expect(responseBody.data).to.be.an('array').and.to.have.lengthOf(12);\r",
													"});\r",
													"\r",
													"var responseBody = pm.response.json();\r",
													"\r",
													"var users = responseBody.data;\r",
													"\r",
													"pm.environment.set(\"all_users\", users);\r",
													"\r",
													"pm.test(\"Page number is correct: 1\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct: 1', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(1);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?per_page=12",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users for the First Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var first_page_response = pm.response.json().data\r",
													"pm.environment.set(\"first_page_response\", first_page_response) \r",
													"\r",
													"pm.test(\"Page number is correct: 1\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct: 6', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct: 2', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													"\r",
													"pm.test(\"Verify that the information of each user matches the information of users 1 to 6 from the allUsers environment variable.\", function () {\r",
													"    var users = pm.response.json().data;\r",
													"    var allUsers = pm.environment.get(\"all_users\");\r",
													"\r",
													"    for (var i = 0; i < 6; i++) {\r",
													"        var index = i;\r",
													"        pm.expect(users[i].id).to.equal(allUsers[index].id);\r",
													"        pm.expect(users[i].email).to.equal(allUsers[index].email);\r",
													"        pm.expect(users[i].first_name).to.equal(allUsers[index].first_name);\r",
													"        pm.expect(users[i].last_name).to.equal(allUsers[index].last_name);\r",
													"        pm.expect(users[i].avatar).to.equal(allUsers[index].avatar);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users for the Last Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(2);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													"\r",
													"pm.test(\"Verify that the information of each user matches the information of users 6 to 12 from the allUsers environment variable.\", function () {\r",
													"    var users = pm.response.json().data;\r",
													"    var allUsers = pm.environment.get(\"all_users\");\r",
													"\r",
													"    for (var i = 0; i < 6; i++) {\r",
													"        var index = i + 6;\r",
													"        pm.expect(users[i].id).to.equal(allUsers[index].id);\r",
													"        pm.expect(users[i].email).to.equal(allUsers[index].email);\r",
													"        pm.expect(users[i].first_name).to.equal(allUsers[index].first_name);\r",
													"        pm.expect(users[i].last_name).to.equal(allUsers[index].last_name);\r",
													"        pm.expect(users[i].avatar).to.equal(allUsers[index].avatar);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with empty page number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Page number is 1 when no page number is given', function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": null
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with valid page and valid per_page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Verify per_page is 4\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.per_page).to.equal(4);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify total_pages is 3\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.total_pages).to.equal(3);\r",
													"});\r",
													"\r",
													"pm.test(\"Verify total number of data is 4\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.data.length).to.equal(4);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=1&per_page=4",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "per_page",
													"value": "4"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users for a single User on a Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"pm.test(\"Length of 'data' array is 1\", function () {\r",
													"    pm.expect(responseBody.data).to.be.an('array').and.to.have.lengthOf(1);\r",
													"});\r",
													"\r",
													"pm.test(\"Page number is correct: 1\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of users per page is correct: 1', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(1);\r",
													"})\r",
													"\r",
													"pm.test('Total number of users is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct: 12', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(12);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?per_page=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains 'total_pages' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('total_pages');",
											"});",
											"",
											"pm.test(\"Response contains 'total' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('total');",
											"});",
											"",
											"pm.test(\"Response contains 'per_page' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('per_page');",
											"});",
											"",
											"pm.test(\"Response contains 'page' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('page');",
											"});",
											"",
											"pm.test(\"Response contains an array of users\", function () {",
											"    pm.expect(pm.response.json().data).to.be.an('array');",
											"});",
											"",
											"pm.test(\"For each user, User Schema is valid\", function () {",
											"    var users = pm.response.json().data;",
											"    var schema = pm.environment.get(\"user_schema\")",
											"    users.forEach(function (user) {",
											"        pm.expect(tv4.validate(user, schema)).to.be.true;",
											"    });",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Get All Users- Fail",
							"item": [
								{
									"name": "Get All Users for a page beyond total pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"        pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"Response body contains 'Page not found' error message\", function () {\r",
													"    var responseBody = pm.response.json();\r",
													"    pm.expect(responseBody).to.have.property('error').that.is.a('string');\r",
													"    pm.expect(responseBody.error).to.equal(\"Page not found\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=3",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with negative page number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is a client error (400)\", function () { \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Error Status is : Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=-3",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "-3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with negative per_page number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page where per_page is negative, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is negative, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is negative, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?per_page=-3",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "-3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users for large page number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is a client error (400)\", function () { \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Error Status is : Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=123456456786543234",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "123456456786543234"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with Non-Integer Page Number (String)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with non-integer page number, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with non-integer number, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where page is non-integer, response should contain: page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=\"abc\"",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "\"abc\""
												}
											]
										}
									},
									"response": [
										{
											"name": "Request with Non-Integer Page Number (float)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=10.5",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "10.5"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fd092e368c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer Page Number (empty list)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=[]",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "[]"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:51 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"c6-L0RHAZDFy457ojOEj4Pyi63g4g0\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fdd789868c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 10,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer Page Number (Special Character)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=\"%23%@\"",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "\"#%@\""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:12:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "HIT"
												},
												{
													"key": "Age",
													"value": "48"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860500cf69568c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										}
									]
								},
								{
									"name": "Get All Userswith Non-Integer per_page Number (String)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with non-integer per_page number, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with non-integer per_page number, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is non-integer, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?per_page=\"abc\"",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "\"abc\""
												}
											]
										}
									},
									"response": [
										{
											"name": "Request with Non-Integer per_page Number (float)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=10.5",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "10.5"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fd092e368c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer per_page Number (empty list)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=[]",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "[]"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:51 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"c6-L0RHAZDFy457ojOEj4Pyi63g4g0\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fdd789868c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 10,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer per_page Number (Special Character)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=\"%23%@\"",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "\"%23%@\""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:12:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "HIT"
												},
												{
													"key": "Age",
													"value": "48"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860500cf69568c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										}
									]
								},
								{
									"name": "Get All Users with Exceedingly Large Page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with exceedingly large page number, response status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response phrase should be: Page Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Page Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response should contain: []\", function () {\r",
													"    pm.expect(pm.response.json().data).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response should contain: requested page does not exist\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"requested page does not exist\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=1265436789",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1265436789"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with Exceedingly Large per_page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with exceedingly large per_page number, response status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large per_page number, response phrase should be: Page Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Page Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large per_page number, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?per_page=1265436789",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "1265436789"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with unknown query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page where query params are unknown, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where query params are unknown, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where query params are unknown, response should contain: unknown query params\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"unknown query params\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?job=\"something\"&age=12",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "job",
													"value": "\"something\""
												},
												{
													"key": "age",
													"value": "12"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get All Users with valid page and per_page but Invalid POST method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid method, response status code should be 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid method, response phrase should be: Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}?page=1&per_page=6",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1"
												},
												{
													"key": "per_page",
													"value": "6"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
											"});"
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Get Single User",
					"item": [
						{
							"name": "Get Single User-Success",
							"item": [
								{
									"name": "Get user with minimum valid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.environment.set(\"existing_first_user_data\", pm.response.json().data)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get user with maximum valid id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/12",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"12"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains expected properties for the user\", function () {",
											"    var user = pm.response.json().data;",
											"    pm.expect(user).to.have.property('id');",
											"    pm.expect(user).to.have.property('email');",
											"    pm.expect(user).to.have.property('first_name');",
											"    pm.expect(user).to.have.property('last_name');",
											"    pm.expect(user).to.have.property('avatar');",
											"});",
											"",
											"var allUsers = pm.environment.get(\"all_users\");",
											"",
											"pm.test(\"User ID is included in the list of all users\", function () {",
											"    var user = pm.response.json().data;",
											"    pm.expect(allUsers.map(u => u.id)).to.include(user.id);",
											"});",
											"",
											"pm.test(\"User's details matches with the existing user obtained from the /api/users/{id} endpoint\", function () {",
											"    var user = pm.response.json().data;",
											"    var allUsers = pm.environment.get(\"all_users\")",
											"    pm.expect(allUsers.find(u => u.id === user.id).first_name).to.equal(user.first_name);",
											"    pm.expect(allUsers.find(u => u.id === user.id).last_name).to.equal(user.last_name);",
											"    pm.expect(allUsers.find(u => u.id === user.id).email).to.equal(user.email);",
											"});",
											"",
											"pm.test(\"Email is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");",
											"});",
											"",
											"",
											"pm.test(\"First name and last name are non-empty strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.first_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
											"  pm.expect(responseData.last_name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
											"});",
											"",
											"",
											"pm.test(\"Avatar is a valid URL or null\", function () {",
											"    const responseData = pm.response.json();",
											"    ",
											"    pm.expect(responseData.data).to.be.an('object');",
											"    pm.expect(responseData.data.avatar).to.satisfy((avatar) => {",
											"        return avatar === null || (typeof avatar === 'string' && /^(http|https):\\/\\/[^ \"]+$/.test(avatar));",
											"    }, \"Avatar should be a valid URL or null\");",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "Get Single User-Fail",
							"item": [
								{
									"name": "Get User with nonexistent id (beyond maximum)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 404', function () {\r",
													"    pm.response.to.have.status(404);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/13",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User with nonexistent id (less than minimum)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 404', function () {\r",
													"    pm.response.to.have.status(404);\r",
													"})"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/0",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"0"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User with negative id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400 (Bad Request)', function () {\r",
													"    pm.response.to.have.status(400);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/-2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"-2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User with id (string format)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400 or 422', function () {",
													"    pm.response.to.have.status(400).or.to.have.status(422);",
													"})",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/abc",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"abc"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get User with id (float)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 400 or 422', function () {\r",
													"    pm.response.to.have.status(400).or.to.have.status(422);\r",
													"})\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/5.6",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"5.6"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
											"});",
											"",
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response is a JSON object\", function () {",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Response body is not empty\", function () {",
									"    pm.expect(pm.response.text()).to.not.be.empty;",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Create User",
					"item": [
						{
							"name": "Create User- Success",
							"item": [
								{
									"name": "Create User with all valid parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSON = pm.response.json();",
													"",
													"var created_id  = responseJSON.id",
													"",
													"var req = pm.sendRequest({",
													"    url: 'https://reqres.in/api/users/' + created_id,",
													"    method: 'GET'",
													"}, function (err, res) {",
													"    if (err) {",
													"        pm.expect.fail(\"Error occurred while sending request\");",
													"    } else {",
													"        pm.test(\"Confirm user creation by retrieving the created user using GET req: Response status is 200\", function () {",
													"            pm.expect(res).to.have.status(200);",
													"        });",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "",
												"value": "",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"surraiyaislamtonni@gmail.com\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with valid email",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseJSON = pm.response.json();\r",
													"\r",
													"var created_id  = responseJSON.id\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/' + created_id,\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail(\"Error occurred while sending request\");\r",
													"    } else {\r",
													"        pm.test(\"Confirm user creation by retrieving the created user using GET req: Response status is 200\", function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"surraiyaislamtonni@gmail.com\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://reqres.in/api/users/56",
											"protocol": "https",
											"host": [
												"reqres",
												"in"
											],
											"path": [
												"api",
												"users",
												"56"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Status code name has string\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});",
											"",
											"pm.test(\"For successfully user creation the response body contains: id\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"id\");",
											"});",
											"pm.test(\"For successfully user creation the response body contains: first_name\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"first_name\");",
											"});",
											"pm.test(\"For successfully user creation the response body contains: last_name\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"last_name\");",
											"});",
											"pm.test(\"For successfully user creation the response body contains: email\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"email\");",
											"});",
											"pm.test(\"For successfully user creation the response body contains: createdAt\", function () {",
											"    pm.expect(pm.response.text()).to.include(\"createdAt\");",
											"});",
											"",
											"pm.test(\"Response contains expected 'createdAt' timestamp for the newly created user\", function () {",
											"    var responseBody = pm.response.json();",
											"    var createdAtTimestamp = new Date(responseBody.createdAt);",
											"    var currentDate = new Date();",
											"    var currentTime = new Date().getTime();",
											"    ",
											"    // Allow a small tolerance for time difference to account for server response time",
											"    var timeTolerance = 10000; // 10 seconds tolerance",
											"",
											"    pm.expect(createdAtTimestamp.getDate()).to.be.equal(currentDate.getDate());",
											"    pm.expect(createdAtTimestamp.getTime()).to.be.closeTo(currentTime, timeTolerance);",
											"});",
											"",
											"pm.test(\"First name and last name are strings\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.first_name).to.be.a('string')",
											"  pm.expect(responseData.last_name).to.be.a('string')",
											"});",
											"",
											"pm.test(\"Avatar is either a valid URL or empty string\", function () {",
											" const responseData = pm.response.json();",
											"  ",
											" pm.expect(responseData).to.be.an('object');",
											" if (responseData.avatar !== \"\") {",
											"    pm.expect(responseData.avatar).to.match(/^http(s)?:\\/\\/.+/)",
											" } else {",
											"    pm.expect(responseData.avatar).to.have.lengthOf.at.least(0, \"Avatar can be empty string\");;",
											" }",
											"});",
											"",
											"",
											"pm.test(\"Email is a non-empty string\", function () {",
											"  const responseData = pm.response.json();",
											"  ",
											"  pm.expect(responseData).to.be.an('object');",
											"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Create User-Fail",
							"item": [
								{
									"name": "Create user with all empty body",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\",\r\n    \"avatar\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create an existing user",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"first_name\": \"Janet\",\r\n    \"last_name\": \"Weaver\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with invalid email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid email, response body contains: emailIsInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsInvalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\":\"surraiya\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with empty email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty email, response body contains: emailIsMissing\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsMissing\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with invalid email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid email format, response body contains: emailFormatIsInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailFormatIsInvalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": 24\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": [
										{
											"name": "Create user with invalid email format",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": 10.3\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Create user with invalid email format",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create user with empty request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty request body, response body contains: requestBodyCannotBeEmpty\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"requestBodyCannotBeEmpty\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{ }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user without email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty email, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with an invalid field",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with invalid field, response body contains: invalidField\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidField\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"job\" : \"tester\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with only firstName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with only firstName, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"surraiya\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with only lastName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with only lastName, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\" : \"tonni\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with large string in firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with large string in firstName, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with large string in firstName, response body contains: firstnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"surraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya \",\r\n    \"last_name\": \"Islam\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with large string in lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with large string in last name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with large string in lastName, response body contains: firstnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"Islam idhooshogfihjosilfdgjsporeuuhusyher \"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with digit as input in first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with digit as input in first name, response body contains: firstnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with digit as input in first name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\" : 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with digit as input in last name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with digit as input in last name, response body contains: lastnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with digit as input in last name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\": 4\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with special character as input in first name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with special character as input in first name, response body contains: firstnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with digit as input in first name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\" :\"%#@%$%&\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with special character as input in last name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with special character as input in last name, response body contains: lastnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with digit as input in last name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\": \"^(&#@\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with only avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with only avatar, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with invalid avatar format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with invalid avatar format, response body contains: invalidAvatarFormat\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidAvatarFormat\");\r",
													"});\r",
													"\r",
													"pm.test(\"For user with digit as input in last name, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"}); "
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatar\" : 123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For creating user with id, response body contains: emailIsRequired\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsRequired\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\" : 23\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with invalid id (string as input)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": \"abc\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user with empty id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User with all valid parameters along with id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For user with id as input, response body contains: ID field cannot be provided manually\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"ID field cannot be provided manually\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"var randEmail = \"surraiya\" + \"{{$randomInt}}\" + \"@gmail.com\"\r",
													"pm.environment.set(\"email\",randEmail)"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"id\" : 123,\r\n    \"email\": \"{{email}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response status code is 400\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(\"Response phrase is: Bad Request\", function () {",
											"    pm.response.to.have.status(\"Bad Request\");",
											"});",
											"",
											"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
											"});",
											"",
											"",
											""
										]
									}
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"var body = pm.response.json();",
									"var schema = pm.environment.get(\"user_schema\")",
									"pm.test('Schema is valid', function () {",
									"    pm.expect(tv4.validate(body, schema)).to.be.true;",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Update User",
					"item": [
						{
							"name": "Update User - Success",
							"item": [
								{
									"name": "Update User of existing id with all correct body parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_email = pm.response.json().email;\r",
													"\r",
													"var updated_first_name = pm.response.json().first_name;\r",
													"\r",
													"var updated_last_name = pm.response.json().last_name;\r",
													"\r",
													"var updated_avatar = pm.response.json().avatar;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Email, first name, last name and avatar match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.email).to.equal(updated_email);\r",
													"            pm.expect(userData.first_name).to.equal(updated_first_name);\r",
													"            pm.expect(userData.last_name).to.equal(updated_last_name);\r",
													"            pm.expect(userData.avatar).to.equal(updated_avatar);\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Avatar is either a valid URL or empty string\", function () {\r",
													" const responseData = pm.response.json();\r",
													"  \r",
													" pm.expect(responseData).to.be.an('object');\r",
													" if (responseData.avatar !== \"\") {\r",
													"    pm.expect(responseData.avatar).to.match(/^http(s)?:\\/\\/.+/)\r",
													" } else {\r",
													"    pm.expect(responseData.avatar).to.have.lengthOf.at.least(0, \"Avatar can be empty string\");;\r",
													" }\r",
													"});\r",
													"\r",
													"pm.test(\"Email is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User of existing id with empty firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_email = pm.response.json().email;\r",
													"\r",
													"var updated_first_name = pm.response.json().first_name;\r",
													"\r",
													"var updated_last_name = pm.response.json().last_name;\r",
													"\r",
													"var updated_avatar = pm.response.json().avatar;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Email, first name, last name and avatar match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.email).to.equal(updated_email);\r",
													"            pm.expect(userData.first_name).to.equal(updated_first_name);\r",
													"            pm.expect(userData.last_name).to.equal(updated_last_name);\r",
													"            pm.expect(userData.avatar).to.equal(updated_avatar);\r",
													"        });\r",
													"    }\r",
													"});\r",
													"\r",
													"pm.test(\"Avatar is either a valid URL or empty string\", function () {\r",
													" const responseData = pm.response.json();\r",
													"  \r",
													" pm.expect(responseData).to.be.an('object');\r",
													" if (responseData.avatar !== \"\") {\r",
													"    pm.expect(responseData.avatar).to.match(/^http(s)?:\\/\\/.+/)\r",
													" } else {\r",
													"    pm.expect(responseData.avatar).to.have.lengthOf.at.least(0, \"Avatar can be empty string\");;\r",
													" }\r",
													"});\r",
													"\r",
													"pm.test(\"Email is a non-empty string\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  pm.expect(responseData.email).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Email should be a non-empty string\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User of existing id with empty lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_email = pm.response.json().email;\r",
													"\r",
													"var updated_first_name = pm.response.json().first_name;\r",
													"\r",
													"var updated_last_name = pm.response.json().last_name;\r",
													"\r",
													"var updated_avatar = pm.response.json().avatar;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Email, first name, last name and avatar match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.email).to.equal(updated_email);\r",
													"            pm.expect(userData.first_name).to.equal(updated_first_name);\r",
													"            pm.expect(userData.last_name).to.equal(updated_last_name);\r",
													"            pm.expect(userData.avatar).to.equal(updated_avatar);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"tonni\",\r\n    \"last_name\": \"\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user with empty avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_email = pm.response.json().email;\r",
													"\r",
													"var updated_first_name = pm.response.json().first_name;\r",
													"\r",
													"var updated_last_name = pm.response.json().last_name;\r",
													"\r",
													"var updated_avatar = pm.response.json().avatar;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Email, first name, last name and avatar match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.email).to.equal(updated_email);\r",
													"            pm.expect(userData.first_name).to.equal(updated_first_name);\r",
													"            pm.expect(userData.last_name).to.equal(updated_last_name);\r",
													"            pm.expect(userData.avatar).to.equal(updated_avatar);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update User of existing id with only email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_email = pm.response.json().email;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Email match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.email).to.equal(updated_email);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update User of existing id with only first_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_first_name = pm.response.json().first_name;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: first name match the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.first_name).to.equal(updated_first_name);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"first_name\": \"{{$randomFirstName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update User of existing id with only last_name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_last_name = pm.response.json().last_name;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: last name matches the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.last_name).to.equal(updated_last_name);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"last_name\": \"{{$randomLastName}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update User of existing id with only avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_avatar = pm.response.json().avatar;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/users/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Verify user update by retrieving the created user using GET req: Confirm user data: Avatar matches the expected values', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.avatar).to.equal(updated_avatar);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"avatar\": \"{{$randomImageUrl}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var body = pm.response.json();",
											"var schema = pm.environment.get(\"user_schema\")",
											"pm.test('Schema is valid', function () {",
											"    pm.expect(tv4.validate(body, schema)).to.be.true;",
											"});",
											"",
											""
										]
									}
								}
							]
						},
						{
							"name": "Update User -  Fail",
							"item": [
								{
									"name": "Update user of nonexisting id with all correct body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"pm.test(\"Body should matches string: idNotExist\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"idNotExist\");\r",
													"});\r",
													"pm.test(\"Status phrase should be: Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/123",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"123"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user of existing id with all correct body along with id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body should matches string: id is not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id is not allowed\");\r",
													"});\r",
													"pm.test(\"Status phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"id\": 20,\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User of existing id with all empty body parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For all empty body parameter, response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For all empty body parameter, response body contains: Bad Request\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For all empty body parameter, response phrase is: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"first_name\": \"\",\r\n    \"last_name\": \"\",\r\n    \"avatar\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partially Update User of existing id with all empty body parameters (email)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty body parameter, response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For empty body parameter, response body contains: Bad Request\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For empty body parameter, response phrase is: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Partially Update User of existing id with all empty body parameters (first_name)",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"first_name\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										},
										{
											"name": "Partially Update User of existing id with all empty body parameters (last_name)",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"last_name\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										},
										{
											"name": "Partially Update User of existing id with all empty body parameters (avatar)",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"avatar\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										}
									]
								},
								{
									"name": "Update user of existing id with empty email",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty email, response  body should contain: emailIsMissing\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"emailIsMissing\");\r",
													"});\r",
													"\r",
													"pm.test(\"For empty email, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For empty email, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user of existing id with invalid email format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid email, response  body should contain: invalidEmail\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidEmail\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid email, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid email, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"surraiya\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Update user of existing id with invalid email format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": 123,\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 11:04:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709723090&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rzo8MhC1%2BhsQkI6h984C7HszH2b4mqptjK7pext9jAM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709723090&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rzo8MhC1%2BhsQkI6h984C7HszH2b4mqptjK7pext9jAM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"9a-VXnGsK8BPWzOPcSThoLP8HboJVc\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8601de018d391db0-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"surraiya\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\",\n    \"updatedAt\": \"2024-03-06T11:04:50.241Z\"\n}"
										},
										{
											"name": "Update user of existing id with invalid email format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": [],\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 11:05:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709723143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=TV%2Fr3MklCnfC9V4DIj17B%2BxchB%2BknjXhcncIwJzt898%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709723143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=TV%2Fr3MklCnfC9V4DIj17B%2BxchB%2BknjXhcncIwJzt898%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"9a-C9+7I50aRznhJmLFHCqDxH1RH0E\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8601df4cee021db0-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"surraiya\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\",\n    \"updatedAt\": \"2024-03-06T11:05:43.242Z\"\n}"
										}
									]
								},
								{
									"name": "Update user of existing id with invalid firstname format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid firstname, response  body should contain: invalidFirstname\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidFirstname\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid firstname, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid firstname, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"surraiya@gmail.com\",\r\n    \"first_name\": 123,\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Update user of existing id with invalid email format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"surraiya@gmail.com\",\r\n    \"first_name\": 12.45,\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 11:04:50 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709723090&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rzo8MhC1%2BhsQkI6h984C7HszH2b4mqptjK7pext9jAM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709723090&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=rzo8MhC1%2BhsQkI6h984C7HszH2b4mqptjK7pext9jAM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"9a-VXnGsK8BPWzOPcSThoLP8HboJVc\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8601de018d391db0-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"surraiya\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\",\n    \"updatedAt\": \"2024-03-06T11:04:50.241Z\"\n}"
										},
										{
											"name": "Update user of existing id with invalid email format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"surraiya@gmail.com\",\r\n    \"first_name\": [],\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 11:05:43 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709723143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=TV%2Fr3MklCnfC9V4DIj17B%2BxchB%2BknjXhcncIwJzt898%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709723143&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=TV%2Fr3MklCnfC9V4DIj17B%2BxchB%2BknjXhcncIwJzt898%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"9a-C9+7I50aRznhJmLFHCqDxH1RH0E\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8601df4cee021db0-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"surraiya\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\",\n    \"updatedAt\": \"2024-03-06T11:05:43.242Z\"\n}"
										}
									]
								},
								{
									"name": "Update user of existing id with invalid lastname format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid lastname, response  body should contain: invalidLastname\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidLastname\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid lastname, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid lastname, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"surraiya@gmail.com\",\r\n    \"first_name\": \"tonni\",\r\n    \"last_name\": 123,\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Update user of existing id with invalid firstname format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"surraiya@gmail.com\",\r\n    \"first_name\": \"tonni\",\r\n    \"last_name\": [],\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 11:11:59 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709723519&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=vsTyQJOcAxgBXBwI7wF7%2Br0ef1F2469f5KrYpwkdopM%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709723519&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=vsTyQJOcAxgBXBwI7wF7%2Br0ef1F2469f5KrYpwkdopM%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"9d-dhQoRjM1/KwoAmXPwvlopalIvZQ\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8601e87d0d781db0-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"surraiya@gmail.com\",\n    \"first_name\": \"tonni\",\n    \"last_name\": 123,\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\",\n    \"updatedAt\": \"2024-03-06T11:11:59.587Z\"\n}"
										}
									]
								},
								{
									"name": "Update User of existing id with large string in firstname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For large input in firstname, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For large input in firstname, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For large input in firstname, response should contain: firstnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"firstnameInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User of existing id with large string in lastname",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For large input in lastname, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For large input in lastname, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For large input in lastname, response should contain: lastnameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"lastnameInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"tonni\",\r\n    \"last_name\": \"surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\",\r\n    \"avatar\": \"https://reqres.in/img/faces/2-image.jpg\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User of existing id with large string in avatar",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For large input in avatar, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For large input in avatar, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For large input in avatar, response should contain: avatarInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"avatarInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"tonni\",\r\n    \"last_name\": \"\",\r\n    \"avatar\": \"https://surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update user with invalid avatar format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid avatar, response  body should contain: invalidAvatar\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidAvatar\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid avatar, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid avatar, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"Avatar is either a valid URL or null\", function () {\r",
													"  const responseData = pm.response.json();\r",
													"  \r",
													"  pm.expect(responseData).to.be.an('object');\r",
													"  if (responseData.avatar !== null) {\r",
													"    pm.expect(responseData.avatar).to.match(/^http(s)?:\\/\\/.+/);\r",
													"  }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": \"avatar\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Update user with empty avatar",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": 123\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 16:14:09 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709741649&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=u7lTbQ2A%2B3ASNLX03hhGOJFHWAgaHk%2BohhPOeKXt5a0%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709741649&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=u7lTbQ2A%2B3ASNLX03hhGOJFHWAgaHk%2BohhPOeKXt5a0%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"92-Rx+WUaUeorsVT9VgLSiw/7xnSgs\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8603a31aadb0693f-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"Katharina.Heidenreich43@gmail.com\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": \"avatar\",\n    \"updatedAt\": \"2024-03-06T16:14:09.125Z\"\n}"
										},
										{
											"name": "Update user with invalid avatar format",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"email\": \"{{$randomEmail}}\",\r\n    \"first_name\": \"surraiya\",\r\n    \"last_name\": \"tonni\",\r\n    \"avatar\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{user_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{user_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 17:17:42 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709745462&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=M1vOA2kAwvXS6CT8T8WdtYhhcxN823KCeu1eEORMk54%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709745462&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=M1vOA2kAwvXS6CT8T8WdtYhhcxN823KCeu1eEORMk54%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"86-JbCvGaMnVhceWnO3rpruLVKKTQU\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "86040033dfcd6ae6-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"Giuseppe_Hilll81@yahoo.com\",\n    \"first_name\": \"surraiya\",\n    \"last_name\": \"tonni\",\n    \"avatar\": 123,\n    \"updatedAt\": \"2024-03-06T17:17:42.427Z\"\n}"
										}
									]
								},
								{
									"name": "Update User using nonexistent field in schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For nonexistent field in schema, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For nonexistent field in schema, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For nonexistent field in schema, response should contain: invalidField\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidField\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"job\" : \"software engineer\",\r\n    \"age\" : 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Delete User",
					"item": [
						{
							"name": "Delete user - Success",
							"item": [
								{
									"name": "Delete User of existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 204 if delete successful\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"pm.test(\"status code name has string: No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Delete User of existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 404 if delete was successful\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"status code name has string: Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete user - Fail",
							"item": [
								{
									"name": "Delete User of nonexisting id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 204 if delete successful\", function () {\r",
													"    pm.response.to.not.have.status(204);\r",
													"});\r",
													"pm.test(\"status code name has string: No Content\", function () {\r",
													"    pm.response.to.not.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/20",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"20"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {",
							"    '$schema': 'https://json-schema.org/draft-07/schema',",
							"    '$id': 'https://reqres.in/api/users/2',",
							"    'title': 'Root Schema',",
							"    'type': 'object',",
							"    'default': {},",
							"    'required': ['email'],",
							"    'properties': {",
							"        'id': {",
							"            'title': 'The id Schema',",
							"            'type': 'integer',",
							"            'default': 0,",
							"            'examples': [2]",
							"        },",
							"        'email': {",
							"            'title': 'The email Schema',",
							"            'type': 'string',",
							"            'default': '',",
							"            'examples': ['janet.weaver@reqres.in']",
							"        },",
							"        'first_name': {",
							"            'title': 'The first_name Schema',",
							"            'type': 'string',",
							"            'default': '',",
							"            'examples': ['Janet']",
							"        },",
							"        'last_name': {",
							"            'title': 'The last_name Schema',",
							"            'type': 'string',",
							"            'default': '',",
							"            'examples': ['Weaver']",
							"        },",
							"        'avatar': {",
							"            'title': 'The avatar Schema',",
							"            'type': 'string',",
							"            'default': '',",
							"            'examples': ['https://reqres.in/img/faces/2-image.jpg']",
							"        },",
							"        'additionalProperties': true",
							"    },",
							"    'examples': [{",
							"            'id': 2,",
							"            'email': 'janet.weaver@reqres.in',",
							"            'first_name': 'Janet',",
							"            'last_name': 'Weaver',",
							"            'avatar': 'https://reqres.in/img/faces/2-image.jpg'",
							"        }]",
							"};",
							"",
							"pm.environment.set(\"user_schema\", schema)"
						]
					}
				}
			]
		},
		{
			"name": "/api/unknown",
			"item": [
				{
					"name": "Get All unknown resources",
					"item": [
						{
							"name": "Get All unknown resources - Success",
							"item": [
								{
									"name": "Request with Default Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var responseBody = pm.response.json();\r",
													"\r",
													"var resources = responseBody.data;\r",
													"\r",
													"pm.environment.set(\"all_resources\", resources);\r",
													"\r",
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of resources per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of resources is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with Valid Page and Per Page Parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(4);\r",
													"});\r",
													"\r",
													"pm.test('Number of resources per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(3);\r",
													"})\r",
													"\r",
													"pm.test('Total number of resources is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(4);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=4&per_page=3",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "4"
												},
												{
													"key": "per_page",
													"value": "3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request for the Last Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(2);\r",
													"});\r",
													"\r",
													"pm.test('Number of resources per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(6);\r",
													"})\r",
													"\r",
													"pm.test('Total number of resources is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(2);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request for a Single Item on a Page",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Page number is correct\", function () {\r",
													"    pm.expect(pm.response.json().page).to.equal(1);\r",
													"});\r",
													"\r",
													"pm.test('Number of resources per page is correct', function () {\r",
													"    pm.expect(pm.response.json().per_page).to.equal(1);\r",
													"})\r",
													"\r",
													"pm.test('Total number of resources is correct', function () {\r",
													"    pm.expect(pm.response.json().total).to.equal(12);\r",
													"})\r",
													"\r",
													"pm.test('Total number of pages is correct', function () {\r",
													"    pm.expect(pm.response.json().total_pages).to.equal(12);\r",
													"})\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?per_page=1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "1"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Response contains 'total_pages' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('total_pages');",
											"});",
											"",
											"pm.test(\"Response contains 'total' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('total');",
											"});",
											"",
											"pm.test(\"Response contains 'per_page' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('per_page');",
											"});",
											"",
											"pm.test(\"Response contains 'page' field\", function () {",
											"    pm.expect(pm.response.json()).to.have.property('page');",
											"});",
											"",
											"pm.test(\"Response contains an array of resources\", function () {",
											"    pm.expect(pm.response.json().data).to.be.an('array');",
											"});",
											"",
											"pm.test(\"Response contains expected properties for each resource\", function () {",
											"    var users = pm.response.json().data;",
											"    users.forEach(function (user) {",
											"        pm.expect(user).to.have.property('id');",
											"        pm.expect(user).to.have.property('name');",
											"        pm.expect(user).to.have.property('year');",
											"        pm.expect(user).to.have.property('color');",
											"        pm.expect(user).to.have.property('pantone_value');",
											"    });",
											"});",
											"",
											"pm.test(\"Unknown resources Schema is valid\", function(){",
											"    var users = pm.response.json().data;",
											"    var schema = pm.environment.get(\"unknown_schema\")",
											"    users.forEach(function(user){",
											"        pm.expect(tv4.validate(user, schema)).to.be.true;",
											"    })",
											"})",
											""
										]
									}
								}
							]
						},
						{
							"name": "Get All unknown resources - Fail",
							"item": [
								{
									"name": "Request with Default Parameters using invalid method Post",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid method, response status code should be 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid method, response phrase should be: Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request for a Page Beyond Total Pages",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page beyond total pages, response status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page beyond total pages, response phrase should be: Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page beyond total pages, response should contain: []\", function () {\r",
													"    pm.expect(pm.response.json().data).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page beyond total pages, response should contain: page doesn't exist\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"page doesn't exist\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=20",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "20"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with Negative Page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with negative page number, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with negative page number, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where page is negative, response should contain: page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=-2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "-2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with Negative Per Page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page where per_page is negative, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is negative, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is negative, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?per_page=-2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "-2"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with Non-Integer Page Number (String)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with non-integer page number, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with non-integer number, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where page is non-integer, response should contain: page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=\"abc\"",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "\"abc\""
												}
											]
										}
									},
									"response": [
										{
											"name": "Request with Non-Integer Page Number (float)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=10.5",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "10.5"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fd092e368c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer Page Number (empty list)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=[]",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "[]"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:51 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"c6-L0RHAZDFy457ojOEj4Pyi63g4g0\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fdd789868c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 10,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer Page Number (Special Character)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?page=\"%23%@\"",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "page",
															"value": "\"#%@\""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:12:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "HIT"
												},
												{
													"key": "Age",
													"value": "48"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860500cf69568c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										}
									]
								},
								{
									"name": "Request with Non-Integer per_page Number (String)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with non-integer per_page number, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with non-integer per_page number, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where per_page is non-integer, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?per_page=\"abc\"",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "\"abc\""
												}
											]
										}
									},
									"response": [
										{
											"name": "Request with Non-Integer per_page Number (float)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=10.5",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "10.5"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:18 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755818&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=os8Wt2DjPh2NwMW0caX41GkHUN4Fixya%2BuIoz43FA14%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fd092e368c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer per_page Number (empty list)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=[]",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "[]"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:10:51 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755851&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=8%2BVGEPvTULicdLPmy4cXfiM1kf62E6mwXBUmHcS2Xi8%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"c6-L0RHAZDFy457ojOEj4Pyi63g4g0\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8604fdd789868c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 10,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										},
										{
											"name": "Request with Non-Integer per_page Number (Special Character)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}?per_page=\"%23%@\"",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													],
													"query": [
														{
															"key": "per_page",
															"value": "\"%23%@\""
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 20:12:53 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709755925&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=PsxbXCXMv9o5GQr3WLDQhl2hOF3ao2B1xIQItqrnQDc%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2c1-N6Rqerxquq2kgQhL51EiSg4x0R8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "HIT"
												},
												{
													"key": "Age",
													"value": "48"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860500cf69568c44-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"page\": 1,\n    \"per_page\": 6,\n    \"total\": 12,\n    \"total_pages\": 2,\n    \"data\": [\n        {\n            \"id\": 1,\n            \"name\": \"cerulean\",\n            \"year\": 2000,\n            \"color\": \"#98B2D1\",\n            \"pantone_value\": \"15-4020\"\n        },\n        {\n            \"id\": 2,\n            \"name\": \"fuchsia rose\",\n            \"year\": 2001,\n            \"color\": \"#C74375\",\n            \"pantone_value\": \"17-2031\"\n        },\n        {\n            \"id\": 3,\n            \"name\": \"true red\",\n            \"year\": 2002,\n            \"color\": \"#BF1932\",\n            \"pantone_value\": \"19-1664\"\n        },\n        {\n            \"id\": 4,\n            \"name\": \"aqua sky\",\n            \"year\": 2003,\n            \"color\": \"#7BC4C4\",\n            \"pantone_value\": \"14-4811\"\n        },\n        {\n            \"id\": 5,\n            \"name\": \"tigerlily\",\n            \"year\": 2004,\n            \"color\": \"#E2583E\",\n            \"pantone_value\": \"17-1456\"\n        },\n        {\n            \"id\": 6,\n            \"name\": \"blue turquoise\",\n            \"year\": 2005,\n            \"color\": \"#53B0AE\",\n            \"pantone_value\": \"15-5217\"\n        }\n    ],\n    \"support\": {\n        \"url\": \"https://reqres.in/#support-heading\",\n        \"text\": \"To keep ReqRes free, contributions towards server costs are appreciated!\"\n    }\n}"
										}
									]
								},
								{
									"name": "Request with Exceedingly Large Page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with exceedingly large page number, response status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response phrase should be: Page Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Page Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response should contain: []\", function () {\r",
													"    pm.expect(pm.response.json().data).to.be.an('array').that.is.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large page number, response should contain: requested page does not exist\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"requested page does not exist\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?page=1265436789",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "page",
													"value": "1265436789"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with Exceedingly Large per_page Number",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page with exceedingly large per_page number, response status code should be 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large per_page number, response phrase should be: Page Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Page Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page with exceedingly large per_page number, response should contain: per_page is invalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"per_page is invalid\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?per_page=1265436789",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "per_page",
													"value": "1265436789"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with unknown query params",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For retrieving page where query params are unknown, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where query params are unknown, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving page where query params are unknown, response should contain: unknown query params\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"unknown query params\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}?job=\"something\"&age=12",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											],
											"query": [
												{
													"key": "job",
													"value": "\"something\""
												},
												{
													"key": "age",
													"value": "12"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Get a single unknown resource",
					"item": [
						{
							"name": "Get a single unknown schema - Success",
							"item": [
								{
									"name": "Request with existing valid id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/7",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"7"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with minimum valid id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with maximum valid id",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/12",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"12"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var responseBody = pm.response.json().data",
											"var schema = pm.environment.get(\"unknown_schema\")",
											"",
											"pm.test(\"Unknown schema is valid\", function() {",
											"    pm.expect(tv4.validate(responseBody, schema)).to.be.true;",
											"})",
											"",
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"For successfully fetching a single unknown resource, response phrase should be: OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"// var allResources = pm.environment.get(\"all_resources\");",
											"",
											"// pm.test(\"Unknown resource ID is included in the list of all resources\", function () {",
											"//     var resource = pm.response.json().data;",
											"//     pm.expect(allResources.map(u => u.id)).to.include(resource.id);",
											"// });",
											"",
											"// pm.test(\"User's details matches with the existing user obtained from the /api/users/{id} endpoint\", function () {",
											"//     var resource = pm.response.json().data;",
											"//     pm.expect(allResources.find(u => u.id === resource.id).name).to.equal(resource.name);",
											"//     pm.expect(allResources.find(u => u.id === resource.id).year).to.equal(resource.year);",
											"//     pm.expect(allResources.find(u => u.id === resource.id).color).to.equal(resource.color);",
											"//     pm.expect(allResources.find(u => u.id === resource.id).pantone_value).to.equal(resource.pantone_value);",
											"// });"
										]
									}
								}
							]
						},
						{
							"name": "Get a single unknown schema - Fail",
							"item": [
								{
									"name": "Request with non-existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test('Status code is 404', function () {\r",
													"    pm.response.to.have.status(404);\r",
													"})\r",
													"\r",
													"pm.test(\"For retrieving non existing resource, response phrase should be: Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving non existing resource, response should contain: {}\", function () {\r",
													"    pm.expect(pm.response.json()).to.be.empty;\r",
													"});\r",
													"\r",
													"pm.test(\"For retrieving non existing resource, response should contain: could not find the resource\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"could not find the resource\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/13",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"13"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with invalid ID format (string)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid id, response  body should contain: invalid Id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalid Id\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid id, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid id, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/\"abc\"",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"\"abc\""
											]
										}
									},
									"response": [
										{
											"name": "Request with invalid ID format (float)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/0.13",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"0.13"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 21:20:07 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "2"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709759830&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=iZ6OIfLiIXIWUWSUtUSswWsFuZ%2FdvTcr74aKEeDWRhA%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709759830&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=iZ6OIfLiIXIWUWSUtUSswWsFuZ%2FdvTcr74aKEeDWRhA%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "HIT"
												},
												{
													"key": "Age",
													"value": "177"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "8605634e8becbb53-FRA"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Request with invalid ID format (alpha numeric)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/ab12",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"ab12"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 21:20:31 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "2"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709760031&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=X2s56skcEw%2BuP71fp9D2h%2FPnMaWgRnIqi1qyqw9GDaw%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709760031&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=X2s56skcEw%2BuP71fp9D2h%2FPnMaWgRnIqi1qyqw9GDaw%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860563e69f36bb53-FRA"
												}
											],
											"cookie": [],
											"body": "{}"
										},
										{
											"name": "Request with invalid ID format (special character)",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/\"#@!\"",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"\""
													],
													"hash": "@!\""
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Wed, 06 Mar 2024 21:21:06 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "2"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709760066&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=getG3jGDSqBMaKD5I0gb3io1z6AUqK2%2BChVUWbVW0%2BA%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709760066&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=getG3jGDSqBMaKD5I0gb3io1z6AUqK2%2BChVUWbVW0%2BA%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"2-vyGp6PvFo4RvsFtPoIWeCReyIC8\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "Cache-Control",
													"value": "max-age=14400"
												},
												{
													"key": "CF-Cache-Status",
													"value": "MISS"
												},
												{
													"key": "Vary",
													"value": "Accept-Encoding"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860564c0184abb53-FRA"
												}
											],
											"cookie": [],
											"body": "{}"
										}
									]
								},
								{
									"name": "Request with negative Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid id, response  body should contain: invalid Id\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalid Id\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid id, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid id, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/-1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"-1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with existing ID using invalid POST method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid method, response status code should be 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid method, response phrase should be: Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with existing ID using invalid PUT method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid method, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid method, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with existing ID using invalid PATCH method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid method, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid method, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Create an unknown resource",
					"item": [
						{
							"name": "Create an unknown resource - Success",
							"item": [
								{
									"name": "Create Resource with all valid data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Resource with only name",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Resource with only year",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"year\": 2010\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Resource with only color",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"color\": \"yellow\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Resource with only pantone_value",
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"pantone_value\": \"something\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var responseBody = pm.response.json().data",
											"var schema = pm.environment.get(\"unknown_schema\")",
											"",
											"pm.test(\"Unknown schema is valid\", function() {",
											"    pm.expect(tv4.validate(responseBody, schema)).to.be.true;",
											"})",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"For successfully creating a single unknown resource, response phrase should be: Created\", function () {",
											"    pm.response.to.have.status(\"Created\");",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Create an unknown resource - Fail",
							"item": [
								{
									"name": "Create Resource with all valid data (provide Id manually)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is not 201 (Created)\", function (){\r",
													"    pm.response.to.not.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (4xx)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status.within(400, 499); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"id\": 30,\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Resource with invalid request body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is not 201 (Created)\", function (){\r",
													"    pm.response.to.not.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"job\": \"leader\",\r\n      \"age\": 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with invalid name format (Integer)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid name\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid name\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\" : 123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": [
										{
											"name": "Create resource with invalid name format (Special Character)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : \"^%$#\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid name format (float)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : 10.67\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid name format (list)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										}
									]
								},
								{
									"name": "Create resource with invalid color format (Integer)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid color\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid color\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"color\" : 123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": [
										{
											"name": "Create resource with invalid color format (Special Character)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"color\" : \"^%$#\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid color format (float)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"color\" : 10.67\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid color format (list)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\" : []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										}
									]
								},
								{
									"name": "Create resource with invalid pantone_value format (Integer)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid pantone_value\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid pantone_value\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"pantone_value\" : 123\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": [
										{
											"name": "Create resource with invalid pantone_value format (Special Character)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"pantone_value\" : \"^%$#\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid pantone_value format (float)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"pantone_value\" : 10.67\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										},
										{
											"name": "Create resource with invalid pantone_value format (list)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"pantone_value\" : []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 12:16:15 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Content-Length",
													"value": "62"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709813775&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=Ig7nSccfvejdRh4RVo1T5UR%2F785GsxPGUoXUdOKRHgk%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"3e-nC4kvlAjExIRTPPt5z7gNflNIiA\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860a83fe9abd71b2-FRA"
												}
											],
											"cookie": [],
											"body": "{\n    \"name\": 123,\n    \"id\": \"555\",\n    \"createdAt\": \"2024-03-07T12:16:15.204Z\"\n}"
										}
									]
								},
								{
									"name": "Create Resource with Invalid year format (string)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid year\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid year\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": \"abc\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": [
										{
											"name": "Create Resource with Invalid year format (float)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"year\": \"10.50\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Create Resource with Invalid year format (list)",
											"originalRequest": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"year\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Create Resource with only empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid name\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid name\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with only empty year",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid year\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid year\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with only empty pantone_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid pantone_value\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid pantone_value\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"pantone_value\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with only empty color",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid color\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid color\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"color\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with negative year",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid year\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid year\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": -2\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create resource with larger integer year than: 99999999999999999999999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"response body contains: Invalid year\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Invalid year\");\r",
													"});\r",
													"\r",
													"pm.test(\"Status code is a client error (400)\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(400); \r",
													"});\r",
													"\r",
													"pm.test(\"Response status is Bad Request\", function () {\r",
													"    pm.response.to.be.error; \r",
													"    pm.response.to.have.status(\"Bad Request\"); \r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 999999999999999999999999\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
											"});"
										]
									}
								}
							]
						},
						{
							"name": "Boundary Analysis for year field",
							"item": [
								{
									"name": "Request with minimum year value 0 to 1999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 0 to 1999\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 0\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with maximum year value 0 to 1999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 0 to 1999\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 1999\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with minimum year value 2000 to 2030",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 2000 to 2030\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 2000\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with maximum year value 2000 to 2030",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 2000 to 2030\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 2030\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with minimum year value 2031 to 9999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 2031 to 9999\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 2031\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Request with maximum year value 2031 to 9999",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201 which means year value is acceptable within 2031 to 9999\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"year\": 9999\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}"
											]
										}
									},
									"response": []
								}
							],
							"description": "As in the api there is no specific year boundary so analyzing api's behavior while creating an unknown resource with year. Checking the minimum and maximum boundary."
						}
					]
				},
				{
					"name": "Update an unknown resource",
					"item": [
						{
							"name": "Update an unknown resource - Success",
							"item": [
								{
									"name": "Update Resource of existing id with all valid data",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"var updated_year = pm.response.json().year;\r",
													"var updated_color = pm.response.json().color;\r",
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with empty name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"var updated_year = pm.response.json().year;\r",
													"var updated_color = pm.response.json().color;\r",
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with empty year",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"var updated_year = pm.response.json().year;\r",
													"var updated_color = pm.response.json().color;\r",
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 0,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with empty color",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"var updated_year = pm.response.json().year;\r",
													"var updated_color = pm.response.json().color;\r",
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"\",\r\n      \"pantone_value\": \"value\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with empty pantone_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"var updated_year = pm.response.json().year;\r",
													"var updated_color = pm.response.json().color;\r",
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"red\",\r\n      \"pantone_value\": \"\"\r\n    }",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update Resource of existing id with only name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_name = pm.response.json().name;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.name).to.equal(updated_name);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update Resource with only year",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_year = pm.response.json().year;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.year).to.equal(updated_year);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"year\": 2010\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update Resource with only color",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_color = pm.response.json().color;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.color).to.equal(updated_color);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"color\": \"yellow\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partial Update Resource with only pantone_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var updated_pantone_value = pm.response.json().pantone_value;\r",
													"\r",
													"var req = pm.sendRequest({\r",
													"    url: 'https://reqres.in/api/unknown/1',\r",
													"    method: 'GET'\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        pm.expect.fail('Error occurred while sending request');\r",
													"    } else {\r",
													"        pm.test('Confirm resource data update by retrieving the resource using GET request', function () {\r",
													"            pm.expect(res).to.have.status(200);\r",
													"            var userData = res.json().data;\r",
													"            pm.expect(userData.pantone_value).to.equal(updated_pantone_value);\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"pantone_value\": \"something\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											"var responseBody = pm.response.json().data",
											"var schema = pm.environment.get(\"unknown_schema\")",
											"",
											"pm.test(\"Unknown schema is valid\", function() {",
											"    pm.expect(tv4.validate(responseBody, schema)).to.be.true;",
											"})",
											"",
											"pm.test('Status code is 200', function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test('Status code is OK', function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											""
										]
									}
								}
							]
						},
						{
							"name": "Update an unknown Resource-  Fail",
							"item": [
								{
									"name": "Update non-existing resource id with all correct body",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 405\", function () {\r",
													"    pm.response.to.have.status(405);\r",
													"});\r",
													"pm.test(\"Body should matches string: idNotExist\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"idNotExist\");\r",
													"});\r",
													"pm.test(\"Status phrase should be: Method Not Allowed\", function () {\r",
													"    pm.response.to.have.status(\"Method Not Allowed\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/123",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"123"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update existing resource id with all correct body along with id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"Body should matches string: id is not allowed\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"id is not allowed\");\r",
													"});\r",
													"pm.test(\"Status phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"id\":20,\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with all empty body parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For all empty body parameter, response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For all empty body parameter, response body contains: Bad Request\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For all empty body parameter, response phrase is: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"\",\r\n      \"year\": 0,\r\n      \"color\": \"\",\r\n      \"pantone_value\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Partially Update Resource of existing id with all empty body parameters (name)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For empty body parameter, response status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For empty body parameter, response body contains: Bad Request\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For empty body parameter, response phrase is: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Partially Update Resource of existing id with all empty body parameters (year)",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"year\": 0\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										},
										{
											"name": "Partially Update Resource of existing id with all empty body parameters (last_name)",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"color\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										},
										{
											"name": "Partially Update Resource of existing id with all empty body parameters (pantone_value",
											"originalRequest": {
												"method": "PATCH",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"pantone_value\": \"\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"1"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Date",
													"value": "Thu, 07 Mar 2024 22:44:39 GMT"
												},
												{
													"key": "Content-Type",
													"value": "application/json; charset=utf-8"
												},
												{
													"key": "Transfer-Encoding",
													"value": "chunked"
												},
												{
													"key": "Connection",
													"value": "keep-alive"
												},
												{
													"key": "Report-To",
													"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D\"}]}"
												},
												{
													"key": "Reporting-Endpoints",
													"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709851479&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=x4sLaXeYVOhBx3SkgAUQ6t81gh9d2GE9tt43UdNnVdg%3D"
												},
												{
													"key": "Nel",
													"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
												},
												{
													"key": "X-Powered-By",
													"value": "Express"
												},
												{
													"key": "Access-Control-Allow-Origin",
													"value": "*"
												},
												{
													"key": "Etag",
													"value": "W/\"5e-Xs/cOZ+zTO8/oGwZppPXRz/ex3o\""
												},
												{
													"key": "Via",
													"value": "1.1 vegur"
												},
												{
													"key": "CF-Cache-Status",
													"value": "DYNAMIC"
												},
												{
													"key": "Server",
													"value": "cloudflare"
												},
												{
													"key": "CF-RAY",
													"value": "860e1c842e725d7c-FRA"
												},
												{
													"key": "Content-Encoding",
													"value": "br"
												}
											],
											"cookie": [],
											"body": "{\n    \"email\": \"\",\n    \"first_name\": \"\",\n    \"last_name\": \"\",\n    \"avatar\": \"\",\n    \"updatedAt\": \"2024-03-07T22:44:39.756Z\"\n}"
										}
									]
								},
								{
									"name": "Update Resource of existing id with name format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid name, response  body should contain: invalidName\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidName\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid name, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid name, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": 123,\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": [
										{
											"name": "Update Resource of existing id with name format(special character)",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n      \"name\": \"%$\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"1"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Update Resource of existing id with name format(float)",
											"originalRequest": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": " {\r\n      \"name\": 13.5,\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{base_url}}/{{resource_endpoint}}/1",
													"host": [
														"{{base_url}}"
													],
													"path": [
														"{{resource_endpoint}}",
														"1"
													]
												}
											},
											"_postman_previewlanguage": "Text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Update Resource of existing id with invalid year format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid year, response  body should contain: invalidYear\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidYear\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid year, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid year, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"abcd\",\r\n      \"year\": \"abc\",\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with invalid color format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid color, response  body should contain: invalidColor\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidColor\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid color, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid color, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": 123.78,\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with invalid pantone_value format",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For invalid color, response  body should contain: invalidColor\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidColor\");\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid color, response status code should be 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"For invalid color, response phrase should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": " {\r\n      \"name\": \"surraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"blue\",\r\n      \"pantone_value\": 23.54\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with large string in name",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For large input in name, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For large input in name, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For large input in name, response should contain: nameInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"nameInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"name\": \"surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\",\r\n      \"year\": 2010,\r\n      \"color\": \"black\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with large string in color",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"response should contain: colorInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"colorInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"color\": \"surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\",\r\n      \"year\": 2010,\r\n      \"name\": \"surraiya\",\r\n      \"pantone_value\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with large string in pantone_value",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"response should contain: pantoneValueInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"pantoneValueInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"pantone_value\": \"surraiyasurraiya surraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiyasurraiya\",\r\n      \"year\": 2010,\r\n      \"name\": \"surraiya\",\r\n      \"color\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource of existing id with large Integer in year",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"response should contain: yearInvalid\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"yearInvalid\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n      \"pantone_value\": \"surraiya\",\r\n      \"year\": 2010333333333333333333333333333333333333333444444444444978775,\r\n      \"name\": \"surraiya\",\r\n      \"color\": \"value\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Resource using nonexistent field in schema",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"For nonexistent field in schema, the status code should be: 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"pm.test(\"For nonexistent field in schema, the status code should be: Bad Request\", function () {\r",
													"    pm.response.to.have.status(\"Bad Request\");\r",
													"});\r",
													"pm.test(\"For nonexistent field in schema, response should contain: invalidField\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"invalidField\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"job\" : \"software engineer\",\r\n    \"age\" : 20\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{user_endpoint}}/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{user_endpoint}}",
												"1"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Delete an unknown resource",
					"item": [
						{
							"name": "Delete an unknown resource - Success",
							"item": [
								{
									"name": "Delete Resource of existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 204 if delete successful\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});\r",
													"pm.test(\"status code name has string: No Content\", function () {\r",
													"    pm.response.to.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Verify Delete Resource of existing id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 404 if delete was successful\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"pm.test(\"status code name has string: Not Found\", function () {\r",
													"    pm.response.to.have.status(\"Not Found\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/2",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"2"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete an unknown resource - Fail",
							"item": [
								{
									"name": "Delete Resource of nonexisting id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"status code should be 204 if delete successful\", function () {\r",
													"    pm.response.to.not.have.status(204);\r",
													"});\r",
													"pm.test(\"status code name has string: No Content\", function () {\r",
													"    pm.response.to.not.have.status(\"No Content\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{resource_endpoint}}/20",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{resource_endpoint}}",
												"20"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"var schema = {",
							"    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"default\": {},",
							"    \"title\": \"Root Schema\",",
							"    \"properties\": {",
							"        \"id\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The id Schema\",",
							"            \"examples\": [",
							"                0",
							"            ]",
							"        },",
							"        \"name\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The name Schema\",",
							"            \"examples\": [",
							"                \"string\"",
							"            ]",
							"        },",
							"        \"year\": {",
							"            \"type\": \"integer\",",
							"            \"default\": 0,",
							"            \"title\": \"The year Schema\",",
							"            \"examples\": [",
							"                0",
							"            ]",
							"        },",
							"        \"color\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The color Schema\",",
							"            \"examples\": [",
							"                \"string\"",
							"            ]",
							"        },",
							"        \"pantone_value\": {",
							"            \"type\": \"string\",",
							"            \"default\": \"\",",
							"            \"title\": \"The pantone_value Schema\",",
							"            \"examples\": [",
							"                \"string\"",
							"            ]",
							"        },",
							"        \"additionalProperties\": true",
							"    },",
							"    \"examples\": [{",
							"        \"id\": 0,",
							"        \"name\": \"string\",",
							"        \"year\": 0,",
							"        \"color\": \"string\",",
							"        \"pantone_value\": \"string\"",
							"    }]",
							"}",
							"",
							"pm.environment.set(\"unknown_schema\", schema)"
						]
					}
				}
			]
		},
		{
			"name": "/api/register",
			"item": [
				{
					"name": "Register - Success",
					"item": [
						{
							"name": "Registration of defined user with all valid parameter(username, email and password)",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"eve\",\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of a new user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"username\": \"surraiya\",\r\n  \"email\": \"surraiya123@gmail.com\",\r\n  \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with email and password only",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Registration of defined user with email and password only",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 07:46:03 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "36"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709797563&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=%2F1f771nV8xUToC6QbadJpDMWkjoFFXRI0weZlTqBPfo%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709797563&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=%2F1f771nV8xUToC6QbadJpDMWkjoFFXRI0weZlTqBPfo%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"24-4iP0za1geN2he+ohu8F0FhCjLks\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8608f830691a1cc9-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"id\": 4,\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains expected properties id and token in the response\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res).to.have.property('id');",
									"    pm.expect(res).to.have.property('token');",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Register - Fail",
					"item": [
						{
							"name": "Registration with existing email and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is not 200', function () {\r",
											"  pm.response.to.not.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- User already registered\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"User already registered\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with empty email and empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with empty email and valid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with valid email and empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"eve.holt@reqres.in\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with email only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with invalid email only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eveholtreqresin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with password only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"eve\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with long password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid Password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Password\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with long email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid Email\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Email\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration of defined user with invalid email and password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid email\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid email\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eveholtreqresin\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Registration of defined user with invalid email (special character) and password",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"#@%^\",\r\n    \"password\": \"pistol\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 07:18:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "57"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709795890&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=mw1EG7FP13IghnaQBuyYaPbBaTSPlo12UEHUP0yRv3M%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709795890&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=mw1EG7FP13IghnaQBuyYaPbBaTSPlo12UEHUP0yRv3M%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8608cf5b195a9be9-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Note: Only defined users succeed registration\"\n}"
								},
								{
									"name": "Registration of defined user with invalid email (Integer) and password",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": 123,\r\n    \"password\": \"pistol\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 07:18:10 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "57"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709795890&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=mw1EG7FP13IghnaQBuyYaPbBaTSPlo12UEHUP0yRv3M%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709795890&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=mw1EG7FP13IghnaQBuyYaPbBaTSPlo12UEHUP0yRv3M%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8608cf5b195a9be9-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Note: Only defined users succeed registration\"\n}"
								}
							]
						},
						{
							"name": "Registration of defined user with valid email and invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": [
								{
									"name": "Registration of defined user with valid email and invalid password ([])",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 07:22:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "57"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709796171&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nc2gKOLfXc%2FSdx57FyqPVizhtB2rc8DUvrZQy%2F9PI8M%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709796171&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nc2gKOLfXc%2FSdx57FyqPVizhtB2rc8DUvrZQy%2F9PI8M%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8608d63659639be9-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Note: Only defined users succeed registration\"\n}"
								}
							]
						},
						{
							"name": "Registration with Invalid Request Body Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid Media Type, Only Json is\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Media Type, Only Json is accepted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"email\": \"eve.holt@reqres.in\",\r\n\"password\": \"pistol\"",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Registration with wrong method (GET) but correct url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates error in request method\", function() {\r",
											"    pm.response.to.have.status(405); \r",
											"});\r",
											"\r",
											"pm.test(\"For invalid method, response should be: Method Not Allowed\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect HTTP Method (PUT) and URL for Registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates error in request method\", function() {\r",
											"    pm.response.to.have.status(404); \r",
											"});\r",
											"\r",
											"pm.test(\"For incorrect method and url, response should be: Not Found\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Requested resource is not available\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Requested resource is not available\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register",
										"1"
									]
								}
							},
							"response": [
								{
									"name": "Incorrect HTTP Method (PATCH) and URL for Registration",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								},
								{
									"name": "Incorrect HTTP Method (GET) and URL for Registration",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								},
								{
									"name": "Incorrect HTTP Method (DELETE) and URL for Registration",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								}
							]
						},
						{
							"name": "Register with unknown request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid request body\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid request body\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"job\" : \"something\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"register"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
									"});"
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "/api/login",
			"item": [
				{
					"name": "Login - Success",
					"item": [
						{
							"name": "Login of defined user with all valid parameter(email and password)",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "token = QpwL5tke4Pnpja7X4",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of defined user with all valid parameters: Verify case insensitivity of email address",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "token = QpwL5tke4Pnpja7X4",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"EVE.holT@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login of defined user with all valid parameters: Verify case insensitivity of email address",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token = QpwL5tke4Pnpja7X4",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"EVE.HOLT@REQRES.IN\",\r\n    \"password\": \"pistol\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 09:31:42 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "26"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709803902&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=algmVBzr0uvnNcHjATc3oBST5pDsn84NWEmF6gtVMcU%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709803902&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=algmVBzr0uvnNcHjATc3oBST5pDsn84NWEmF6gtVMcU%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"1a-EGIcyP6BIiCXl5Gb1aph5CGf4VQ\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "860992f8a93f30e4-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"user not found\"\n}"
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test('Status code is 200', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response contains expected properties token in the response\", function () {",
									"    var res = pm.response.json();",
									"    pm.expect(res).to.have.property('token');",
									"});",
									""
								]
							}
						}
					]
				},
				{
					"name": "Login - Fail",
					"item": [
						{
							"name": "Login of unregistered user",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(Unauthorized); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- user not found\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"user not found\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"surraiya123@gmail.com\",\r\n  \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with correct email and incorrect password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Unauthorized\", function() {\r",
											"    pm.response.to.have.status(Unauthorized); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid username or password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid username or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"abc123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with correct email and empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of defined user with all correct email and password: Verify case sensitivity of password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(401); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Unauthorized\", function() {\r",
											"    pm.response.to.have.status(Unauthorized); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid username or password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid username or password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Cookie",
										"value": "token = QpwL5tke4Pnpja7X4",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"Pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"login"
									]
								}
							},
							"response": [
								{
									"name": "Login of defined user with all valid parameter(email and password) Copy",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Cookie",
												"value": "token = QpwL5tke4Pnpja7X4",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"PISTOL\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/login",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"login"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 09:43:06 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "29"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709804586&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=EyuGhKxA2cLq2dyxr87HbsajnJFe7NyLDmMVXf0AZIw%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709804586&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=EyuGhKxA2cLq2dyxr87HbsajnJFe7NyLDmMVXf0AZIw%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"1d-lGCrvD6B7Qzk11+2C98+nGhhuec\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8609a3aa9bee30e4-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"token\": \"QpwL5tke4Pnpja7X4\"\n}"
								}
							]
						},
						{
							"name": "Login with empty email and empty password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with empty email and valid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"password\": \"pistol\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with email only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing password\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with invalid email only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Response status should contain: Bad Request\", function() {\r",
											"    pm.response.to.have.status(\"Bad Request\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid email\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid email\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eveholtreqresin\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with password only",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Missing email or username\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Missing email or username\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"password\": \"eve\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with long password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed registration\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid Password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Password\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login of registered user with correct email and invalid password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid password\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": 123\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": [
								{
									"name": "Login of defined user with valid email and invalid password ([])",
									"originalRequest": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": []\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/{{login_endpoint}}",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{login_endpoint}}"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 07:22:51 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Content-Length",
											"value": "57"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709796171&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nc2gKOLfXc%2FSdx57FyqPVizhtB2rc8DUvrZQy%2F9PI8M%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709796171&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=nc2gKOLfXc%2FSdx57FyqPVizhtB2rc8DUvrZQy%2F9PI8M%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"39-6jrJxn+7f+pQUhbPgNMst7tagpA\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "8608d63659639be9-FRA"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"Note: Only defined users succeed registration\"\n}"
								}
							]
						},
						{
							"name": "Login with Invalid Request Body Media Type",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid Media Type, Only Json is\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid Media Type, Only Json is accepted\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\"email\": \"eve.holt@reqres.in\",\r\n\"password\": \"pistol\"",
									"options": {
										"raw": {
											"language": "text"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login with wrong method (GET) but correct url",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates error in request method\", function() {\r",
											"    pm.response.to.have.status(405); \r",
											"});\r",
											"\r",
											"pm.test(\"For invalid method, response should be: Method Not Allowed\", function() {\r",
											"    pm.response.to.have.status(\"Method Not Allowed\"); \r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Incorrect HTTP Method (PUT) and URL for Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates error in request method\", function() {\r",
											"    pm.response.to.have.status(404); \r",
											"});\r",
											"\r",
											"pm.test(\"For incorrect method and url, response should be: Not Found\", function() {\r",
											"    pm.response.to.have.status(\"Not Found\"); \r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Requested resource is not available\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Requested resource is not available\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}/1",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}",
										"1"
									]
								}
							},
							"response": [
								{
									"name": "Incorrect HTTP Method (PATCH) and URL for Login",
									"originalRequest": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								},
								{
									"name": "Incorrect HTTP Method (GET) and URL for Login",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								},
								{
									"name": "Incorrect HTTP Method (DELETE) and URL for Login",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"janet.weaver@reqres.in\",\r\n    \"password\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{base_url}}/api/register/1",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"api",
												"register",
												"1"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Thu, 07 Mar 2024 08:01:53 GMT"
										},
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										},
										{
											"key": "Transfer-Encoding",
											"value": "chunked"
										},
										{
											"key": "Connection",
											"value": "keep-alive"
										},
										{
											"key": "Report-To",
											"value": "{\"group\":\"heroku-nel\",\"max_age\":3600,\"endpoints\":[{\"url\":\"https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D\"}]}"
										},
										{
											"key": "Reporting-Endpoints",
											"value": "heroku-nel=https://nel.heroku.com/reports?ts=1709798513&sid=c4c9725f-1ab0-44d8-820f-430df2718e11&s=9xO8LISrYd5bAPrvc2OOK2swQE5fYo6ws1pMjLBYKps%3D"
										},
										{
											"key": "Nel",
											"value": "{\"report_to\":\"heroku-nel\",\"max_age\":3600,\"success_fraction\":0.005,\"failure_fraction\":0.05,\"response_headers\":[\"Via\"]}"
										},
										{
											"key": "X-Powered-By",
											"value": "Express"
										},
										{
											"key": "Access-Control-Allow-Origin",
											"value": "*"
										},
										{
											"key": "Etag",
											"value": "W/\"5a-Vdka306Jy6wyZDvxgefSUHlVm0k\""
										},
										{
											"key": "Via",
											"value": "1.1 vegur"
										},
										{
											"key": "CF-Cache-Status",
											"value": "DYNAMIC"
										},
										{
											"key": "Vary",
											"value": "Accept-Encoding"
										},
										{
											"key": "Server",
											"value": "cloudflare"
										},
										{
											"key": "CF-RAY",
											"value": "86090f643ee318d4-FRA"
										},
										{
											"key": "Content-Encoding",
											"value": "br"
										}
									],
									"cookie": [],
									"body": "{\n    \"email\": \"janet.weaver@reqres.in\",\n    \"password\": \"123\",\n    \"updatedAt\": \"2024-03-07T08:01:53.384Z\"\n}"
								}
							]
						},
						{
							"name": "Login with unknown request body",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code indicates failed login\", function() {\r",
											"    pm.response.to.have.status(400); \r",
											"});\r",
											"\r",
											"pm.test(\"response phrase should be: Bad Request\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"Error message is displayed- Invalid request body\", function() {\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid request body\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"job\": \"leader\",\r\n    \"age\": 20\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/{{login_endpoint}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"{{login_endpoint}}"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response body contains expected error key and error msg as value\", function () {",
									"    var responseBody = pm.response.json();",
									"    pm.expect(responseBody).to.have.property('error').that.is.a('string');",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"pm.test(\"Response is a JSON object\", function () {",
					"    pm.response.to.be.json;",
					"});",
					"",
					"pm.test(\"Response body is not empty\", function () {",
					"    pm.expect(pm.response.text()).to.not.be.empty;",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "https://reqres.in",
			"type": "string"
		},
		{
			"key": "user_endpoint",
			"value": "api/users",
			"type": "string"
		},
		{
			"key": "resource_endpoint",
			"value": "api/unknown",
			"type": "string"
		},
		{
			"key": "login_endpoint",
			"value": "api/login",
			"type": "string"
		}
	]
}